Installation Instructions
*************************

CTemplate installation is based on cmake which has to be installed on your machine. In order to configure the build and installation process, execute the following on the command line:

> mkdir \<ctemplate_build_path\>       
> cd \<ctemplate_build_path\>       
> cmake [options] \<ctemplate_source_path\>
> make          # build (Linux/Unix and MinGW only)
> make test    # compile and run tests (optional, Linux/Unix and MinGW only)
> make install  # install (Linux/Unix and MinGW only)

If you use Microsoft Visual C++, you just execute cmake (not make) or cmake-gui with the appropriate generator which creates a solution file '<ctemplate_build_path>/ctemplate.sln'. This file must be opened in Visual Studio.

The most commonly used cmake options are:

-DCMAKE_INSTALL_PREFIX=<path>
where to install ctemplate (binaries will be installed in <path>/bin, libraries in <path>/lib, headers in <path>/include/ctemplate)
-DCTEMPLATE_FORCE_32BITS=ON
will force cmake to build a 32-bit version of the library and executables under 64-bit hosts
-DCTEMPLATE_BUILD_STATIC=ON
will build ctemplate as a static library. (default is to build a dynamic library, aka a DLL under windows)
-DCTEMPLATE_BOOST_INCLUDE_DIRECTORY=<path>
the path where boost includes are installed. This is useful if your compiler does not support hash based maps but a reasonably recent boost version with unordered_map is present